1- `val` ile `var` arasındaki fark nedir?

    'val' ile 'var' keyword'leri değişken tanımlamak için kullanılır.
     'val' keyword'ü, read-only (sadece okunabilir) değişkenler tanımlamamıza
     olanak tanırken, 'var' keyword'ü ise mutable (değeri değişebilen) değişkenler
     tanımlamamıza olanak tanır. Aralarındaki temel fark budur.

=================================================================================

2- Bir `var` değişkeni `val` gibi davranmasını nasıl sağlayabiliriz `val` kelimesini kullanmadan?
 Bunu neden yapmak isteriz? Örnek bir senaryo verin.

    Bir 'var' değişkenin set'ini private yaparak 'val' gibi davranmasını sağlayabiliriz ama bunu sadece
     class'larda yapabiliriz çünkü fonksiyon içerisindeki değişkenlere sadece o fonksiyon içerisinden
     erişebiliriz. Bu yüzden de private set yapmanın bir mantığı kalmaz.

     Örn.
        var name = "Doğaç"
            private set  
     
    Peki oluşturduğumuz değişkenin set'ini neden private yapmak isteriz? Çünkü aynı class içerisinde 
     değiştirebiliriz fakat farklı class'larda sadece okuyabiliriz. Örnek senaryo olarak bir Person
     class'ımızın olduğunu düşünelim. Bu class'ın içerisinde de age isimli bir değişken var ve biz
     bu age değişkeninin sadece Person class'ında değiştirilebilmesini istiyoruz. Bu durumda private set
     kullanabiliriz. Peki neden değişkeni ilk başta private olarak tanımlamıyoruz? Çünkü farklı fonksiyonlarda
     bu age değişkenini okumak/kullanıcıya göstermek isteyebiliriz.

=================================================================================

3- "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın.
 `val` değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

    Immutable (Değişmez) ve read-only (salt okunur) kavramları birbirlerine çok benzerdir, fakat aralarında küçük
     bir fark vardır. Immutable'da, değişkenin değeri ilk tanımlamadan sonra hiçbir zaman, hiçbir şekilde
     değiştirilemez. Read-only'de ise, değişkenin değeri bazı durumlarda değiştirilebilir.
     'val' değişkenlerin immutable değil de read-only olmasının sebebi getter'ının olmasıdır. Değişkenin değerini
     getter kısmında verirsek, başka bir fonksiyondan da bu değişkeni değiştirebiliriz.

     Örn.
        fun main() {

            val math = Math()

            println(math.result)

            math.number2 = 50

            println(math.result)
        }

        class Math() {

            var number1 = 10
            var number2 = 20

            val result get() = number1 + number2
        }
    
    Bu kodda, main fonksiyonunda ilk başta sonucu bastırıyoruz ve val olarak tanımlanan 'result' değişkeninin
     değerinin 30 olduğunu görüyoruz. 'number2' değişkeninin değerini 50 ile değiştirip tekrardan sonucu
     bastırıyoruz ve bu sefer 'result' değişkeninin değerinin 60 olduğunu görüyoruz. Bu yüzden 'val' değişkenler
     immutable değil read-only'dir.

=================================================================================